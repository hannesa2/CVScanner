import org.gradle.internal.logging.text.StyledTextOutputFactory

import static org.gradle.internal.logging.text.StyledTextOutput.Style

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
}

android {
    compileSdkVersion 33

    defaultConfig {
        applicationId "info.opencv.samples"
        minSdkVersion 21
        targetSdkVersion 33
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        def out = services.get(StyledTextOutputFactory).create("")
        if (System.env.USER == "hannes") {
            release {
                def keystore = "${project.gradle.gradleUserHomeDir}/../.android/debug.keystore"
                out.style(Style.Normal).text("I run with user hannes using ")
                        .style(Style.SuccessHeader).println(keystore)
                storePassword "android"
                keyPassword "android"
                keyAlias "androiddebugkey"
                storeFile file(keystore)
            }
        } else if (System.getenv("TRAVIS")) {
            release {
                out.style(Style.Normal).text("I run on TRAVIS")
                storeFile file('../signing/release.keystore')
                storePassword System.getenv("KEYSTORE_PASS")
                keyAlias System.getenv("ALIAS_NAME")
                keyPassword System.getenv("ALIAS_PASS")
            }
        } else {
            release {
                out.style(Style.Normal).text("I run on Github actions")
                storeFile file('../signing/release.keystore')
                storePassword System.getenv("KEYSTORE_PASS")
                keyAlias System.getenv("ALIAS_NAME")
                keyPassword System.getenv("ALIAS_PASS")
            }
        }
        debugCI {
            storeFile file('./debug.keystore')
            storePassword "android"
            keyPassword "android"
            keyAlias "androiddebugkey"
        }
    }

    buildTypes {
        release {
            if (!System.getenv("JITPACK")) {
                signingConfig signingConfigs.release
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debug {
            if (System.getenv("CI") == "true") { // Github action
                signingConfig signingConfigs.debugCI
            }
            applicationIdSuffix ".debug"
            versionNameSuffix ".debug"
        }
    }
    namespace 'info.hannes.cvscanner.sample'

}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation 'com.github.AppDevNext.Logcat:LogcatCoreLib:2.11.3'

    implementation project(':library')
    implementation 'androidx.core:core-ktx:1.9.0'

    androidTestImplementation 'com.github.AppDevNext:Moka:1.4'
    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.4.0'
    // RecyclerViewActions.actionOnItem
    androidTestImplementation "androidx.test:rules:1.4.0" //    GrantPermissionRule
    androidTestImplementation "androidx.test.espresso:espresso-intents:3.4.0"
}

def adbDirectory = '/storage/emulated/0/Download'
def reportsDirectory = "$projectDir/../screenshots/adb"

def clearScreenshotsTask = task('clearScreenshots', type: Exec) {
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'rm', '-r', adbDirectory
}

def createScreenshotDirectoryTask = task('createScreenshotDirectory', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'mkdir', '-p', adbDirectory
}

def fetchScreenshotsTask = task('fetchScreenshots', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'pull', adbDirectory + '/.', reportsDirectory

    dependsOn {
        createScreenshotDirectoryTask
    }

    doFirst {
        new File(reportsDirectory).mkdirs()
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'connectedDebugAndroidTest') {
        task.mustRunAfter {
            clearScreenshotsTask
        }
        task.finalizedBy {
            fetchScreenshotsTask
        }
    }
}